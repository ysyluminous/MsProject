<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"  
  xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"  
  xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"  
  xmlns:p="http://www.springframework.org/schema/p" xsi:schemaLocation="http://www.springframework.org/schema/beans  
     http://www.springframework.org/schema/beans/spring-beans.xsd  
    http://www.springframework.org/schema/aop  
    http://www.springframework.org/schema/aop/spring-aop.xsd  
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context.xsd  
    http://www.springframework.org/schema/tx  
    http://www.springframework.org/schema/tx/spring-tx.xsd  
     http://www.springframework.org/schema/cache  
    http://www.springframework.org/schema/cache/spring-cache.xsd">  
   
    <!-- 引入外置文件 -->  
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:jdbc.properties"/>  
    </bean>  
     
    <!--dbcp数据库连接池配置-->  
   <!--  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">    
        <property name="driverClassName" value="${jdbc.driverClassName}"/>  
        <property name="url" value="${jdbc.url}"/>  
        <property name="username" value="${jdbc.username}"/>  
        <property name="password" value="${jdbc.password}"/>  
    </bean>   -->
    
    
    <!-- druid数据库连接池配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close" lazy-init="false">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 初始大小 -->
		<property name="initialSize" value="1" />
		<!-- 最大链接数 -->
		<property name="maxActive" value="50" />
		<!-- 最大等待数 -->
		<property name="maxWait" value="30000" />
		<!-- filters
			属性类型是字符串，通过别名的方式配置扩展插件，
			常用的插件有：监控统计用的filter:stat 日志用的filter:log4j防御sql注入的filter:wall
 		-->
		<property name="filters" value="stat,wall" />
		
		<!-- timeBetweenEvictionRunsMillis
			1) Destroy线程会检测连接的间隔时间
 			2) testWhileIdle的判断依据
		 -->
		<property name="timeBetweenEvictionRunsMillis" value="3000" />  
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		<!-- validationQuery
			用来检测连接是否有效的sql，要求是一个查询语句。
			如果validationQuery为null，testOnBorrow、testOnReturn、
			testWhileIdle都不会起作用。
		 -->  
		<property name="validationQuery" value="SELECT 'x'" />  
		
		<!-- testWhileIdle	false	
			建议配置为true，不影响性能，并且保证安全性。
			申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，
			执行validationQuery检测连接是否有效。
		 -->
		<property name="testWhileIdle" value="true" />  
		<!-- testOnBorrow
			申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
		-->
		<property name="testOnBorrow" value="false" />  
		<!-- testOnReturn	false	
			归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
		 -->
		<property name="testOnReturn" value="false" />  
		
		<!-- poolPreparedStatements		
			是否缓存preparedStatement，也就是PSCache。
			PSCache对支持游标的数据库性能提升巨大，比如说oracle。
			在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。
			5.5及以上版本有PSCache，建议开启。
		 -->
		<property name="poolPreparedStatements" value="true" />  
		
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	</bean>
	<!-- druid  bean end -->
	<!-- druid end -->
    <!-- spring和MyBatis完美整合 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <!-- 指定数据源 -->  
        <property name="dataSource" ref="dataSource"/>  
        <!-- 具体指定xml文件，可不配 -->  
        <property name="configLocation" value="classpath:mybatis-config.xml"/>  
        <!-- 自动扫描mapping.xml文件，**表示迭代查找 ,,也可在mybatis-config.xml中单独指定xml文件 -->
        <property name="mapperLocations" value="classpath:com/yaosiyuan/dao/xml/*.xml"/>
        <!-- 配置单个xml文件 -->
        <!--<property name="mapperLocations" value="classpath:com/yaosiyuan/dao/xml/MsMerchantMapper.xml"/> -->
        <!-- 配置多个xml文件 -->  
        
       <!--  <property name="mapperLocations">
	        <list>
					<value>classpath:com/yaosiyuan/dao/xml/*.xml</value>
			</list>
	          <array>
	              <value>classpath:com/yaosiyuan/dao/xml/MsMerchantMapper.xml</value>
	              <value>classpath:com/yaosiyuan/dao/xml/MsMerchantMapper.xml</value>
	          </array>
	    </property> -->
        
    </bean>  
   
    <!-- 自动扫描dao下的所有dao接口，并实现这些接口，可直接在程序中使用dao接口，不用再获取sqlsession对象 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> 
     
        <!--  
        basePackage 属性是映射器接口文件的包路径。  
                 你可以使用分号或逗号 作为分隔符设置多于一个的包路径  
        -->  
        <property name="basePackage" value="com/yaosiyuan/dao"/>  
        <!--  
                 因为会自动装配 SqlSessionFactory和SqlSessionTemplate  
                 所以没 有 必 要 去 指 定 SqlSessionFactory或 SqlSessionTemplate  
                 因此可省略不配置；  
                 但是,如果你使 用了一个 以上的 DataSource，那么自动装配可能会失效。  
                 这种 情况下，你可以使用sqlSessionFactoryBeanName或sqlSessionTemplateBeanName属性来设置正确的 bean名称来使用；  
        -->  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>  
    </bean>  
  
</beans>  
